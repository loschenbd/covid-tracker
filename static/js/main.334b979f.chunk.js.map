{"version":3,"sources":["components/util.js","components/InfoBox.js","components/Map.js","components/Table.js","components/LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["sortData","data","sortedData","sort","a","b","cases","MyComponent","title","total","Card","className","CardContent","Typography","color","Map","center","zoom","TileLayer","url","attribution","Table","countries","map","country","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","numeral","value","format","scales","xAxes","type","time","toolTipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","casesType","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","countryInfo","setCountryInfo","tableData","setTableData","lat","lng","mapCenter","mapZoom","name","iso2","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","InfoBox","todayCases","todayRecovered","recovered","todayDeaths","deaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.334b979f.chunk.js","sourcesContent":["export const sortData = data => {\n  const sortedData = [...data];\n\n  sortedData.sort((a, b) => {\n    if (a.cases > b.cases) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n  return sortedData;\n};","import React from 'react';\nimport {Card, CardContent, Typography} from \"@material-ui/core\";\n\nconst MyComponent = ({ title, cases, total }) => {\n  return (\n    <Card className={\"infobox\"}>\n        <CardContent>\n      {/* Title */}\n          <Typography className=\"infobox__title\" color=\"textSecondary\">\n            {title}\n          </Typography>\n      {/* Cases */}\n          <h2 className=\"infobox_cases\">{cases}</h2>\n\n      {/* Total */}\n      <Typography className=\"infobox_total\" color=\"textSecondary \">\n        {total} Total\n      </Typography>\n        </CardContent>\n    </Card>\n  );\n};\n\nexport default MyComponent;\n","import React from 'react';\nimport \"./Map.css\"\nimport { Map as LeafletMap, TileLayer} from 'react-leaflet';\n\nfunction Map({center, zoom}) {\n    return (\n      <div className=\"map\">\n        <LeafletMap center={center} zoom={zoom}>\n          <TileLayer\n          url='https://{s}.tile.openstreetmap.org{z}/{x}/{y}.png'\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreet</a> contributors'\n          />\n        </LeafletMap>\n      </div>\n    );\n}\n\nexport default Map;","import React from \"react\";\nimport \"./Table.css\"\n\nconst Table = ({ countries }) => {\n  return (\n    <div className=\"table\">\n      {countries.map(({country, cases}) => (\n        <tr>\n          <td>{country}</td>\n          <td><strong>{cases}</strong></td>\n        </tr>\n      ))}\n    </div>\n  );\n};\n\nexport default Table;\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport  numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          toolTipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType = \"cases\") => {\n  const chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      const newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[\"cases\"][date];\n  }\n  return chartData;\n};\n\nconst LineGraph = ({casesType}) => {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => response.json())\n        .then((data) => {\n          console.log(data);\n          const chartData = buildChartData(data);\n          setData(chartData);\n        });\n    };\n    fetchData();\n  }, [casesType]);\n\n\n  return (\n    <div>\n      <h1>Graph</h1>\n      {data?.length > 0 && (\n        <Line\n          options={options}\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgb(255, 153, 84, 0.5)\",\n                borderColor: \"rgb(255, 153, 84)\",\n                data: data,\n              },\n            ],\n          }}\n        />\n      )}\n\n    </div>\n  );\n};\n\nexport default LineGraph;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\n\nimport {sortData} from \"./components/util\"\nimport InfoBox from \"./components/InfoBox\";\nimport Map from \"./components/Map\";\nimport Table from \"./components/Table\"\nimport LineGraph from \"./components/LineGraph\"\nimport \"./App.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"global\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const[tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.90746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then(response => response.json())\n      .then(data => {\n          setCountryInfo(data);\n        })\n  }, []);\n\n  useEffect(() => {\n    //  async -> send a request to a server, wait for it, do something with data\n\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country, // United States\n            value: country.countryInfo.iso2, // USA\n          }));\n\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setCountries(countries);\n        });\n    };\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n    setCountry(countryCode);\n\n    const url =\n      countryCode === \"global\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n      })\n  };\n\n  return (\n    <div className=\"app\">\n      {/* Header & Selector */}\n      <div className=\"app_left\">\n        <div className=\"app_header\">\n          <h1>COVID-19 Tracker</h1>\n          <FormControl className=\"app_dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onCountryChange}\n              value={country}\n            >\n              {/* Loop through countries and show a dropdown of options*/}\n              <MenuItem value=\"global\">Global</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n              ;\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app_stats\">\n          <InfoBox title={\"Coronavirus Cases\"} cases={countryInfo.todayCases} total={countryInfo.cases} />\n          <InfoBox title={\"Recovered\"} cases={countryInfo.todayRecovered} total={countryInfo.recovered} />\n          <InfoBox title={\"Deaths\"} cases={countryInfo.todayDeaths} total={countryInfo.deaths} />\n        </div>\n        <Map\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n\n      <Card className=\"app_right\">\n        <CardContent>\n          {/* Table */}\n\n          <h3>Live Cases By Country</h3>\n          <Table countries={tableData}/>\n          <h3>Global New Cases</h3>\n        </CardContent>\n        <LineGraph/>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}